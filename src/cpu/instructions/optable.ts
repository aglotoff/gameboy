import { Condition } from "../cpu-state";
import { Register, RegisterPair } from "../register";

import {
  addRegisterPair,
  addOffsetToStackPointer,
  decrementRegisterPair,
  incrementRegisterPair,
} from "./arithmetic16";
import {
  addImmediateToAccumulator,
  addImmediateToAccumulatorWithCarry,
  addIndirectHLToAccumulator,
  addIndirectHLToAccumulatorWithCarry,
  addRegisterToAccumulator,
  addRegisterToAccumulatorWithCarry,
  andAccumulatorWithImmediate,
  andAccumulatorWithIndirectHL,
  andAccumulatorWithRegister,
  compareAccumulatorToImmediate,
  compareAccumulatorToIndirectHL,
  compareAccumulatorToRegister,
  complementAccumulator,
  complementCarryFlag,
  decimalAdjustAccumulator,
  decrementIndirectHL,
  decrementRegister,
  incrementIndirectHL,
  incrementRegister,
  orAccumulatorWithImmediate,
  orAccumulatorWithIndirectHL,
  orAccumulatorWithRegister,
  setCarryFlag,
  subtractImmediateFromAccumualtor,
  subtractImmediateFromAccumualtorWithCarry,
  subtractIndirectHLFromAccumualtor,
  subtractIndirectHLFromAccumualtorWithCarry,
  subtractRegisterFromAccumualtor,
  subtractRegisterFromAccumualtorWithCarry,
  xorAccumulatorWithImmediate,
  xorAccumulatorWithIndirectHL,
  xorAccumulatorWithRegister,
} from "./arithmetic8";
import {
  rotateAccumulatorLeftThroughCarry,
  rotateAccumulatorLeft,
  rotateAccumulatorRightThroughCarry,
  rotateAccumulatorRight,
} from "./bitwise";
import {
  callFunction,
  callFunctionConditional,
  jump,
  jumpConditional,
  jumpToHL,
  relativeJump,
  relativeJumpConditional,
  restartFunction,
  returnFromFunction,
  returnFromFunctionConditional,
  returnFromInterruptHandler,
} from "./flow";
import { bindInstructionArgs as bia, invalidOpcode, OpTable } from "./lib";
import {
  loadDirectFromStackPointer,
  loadHLFromAdjustedStackPointer,
  loadRegisterPair,
  loadStackPointerFromHL,
  popFromStack,
  pushToStack,
} from "./load16";
import {
  loadAccumulatorFromDirectByte,
  loadAccumulatorFromDirectWord,
  loadAccumulatorFromIndirectBC,
  loadAccumulatorFromIndirectC,
  loadAccumulatorFromIndirectDE,
  loadAccumulatorFromIndirectHLDecrement,
  loadAccumulatorFromIndirectHLIncrement,
  loadDirectByteFromAccumulator,
  loadDirectWordFromAccumulator,
  loadIndirectBCFromAccumulator,
  loadIndirectCFromAccumulator,
  loadIndirectDEFromAccumulator,
  loadIndirectHLDecrementFromAccumulator,
  loadIndirectHLFromImmediateData,
  loadIndirectHLFromRegister,
  loadIndirectHLIncrementFromAccumulator,
  loadRegisterFromImmediate,
  loadRegisterFromIndirectHL,
  loadRegisterFromRegister,
} from "./load8";
import {
  disableInterrupts,
  enableInterrupts,
  halt,
  noOperation,
  stop,
} from "./misc";
import { prefixCBInstruction } from "./prefixed-optable";

export function getInstruction(opcode: number) {
  return instructions[opcode];
}

const instructions: OpTable = [
  /* 0x00 */ noOperation,
  /* 0x01 */ bia(loadRegisterPair, RegisterPair.BC),
  /* 0x02 */ loadIndirectBCFromAccumulator,
  /* 0x03 */ bia(incrementRegisterPair, RegisterPair.BC),
  /* 0x04 */ bia(incrementRegister, Register.B),
  /* 0x05 */ bia(decrementRegister, Register.B),
  /* 0x06 */ bia(loadRegisterFromImmediate, Register.B),
  /* 0x07 */ rotateAccumulatorLeft,
  /* 0x08 */ loadDirectFromStackPointer,
  /* 0x09 */ bia(addRegisterPair, RegisterPair.BC),
  /* 0x0a */ loadAccumulatorFromIndirectBC,
  /* 0x0b */ bia(decrementRegisterPair, RegisterPair.BC),
  /* 0x0c */ bia(incrementRegister, Register.C),
  /* 0x0d */ bia(decrementRegister, Register.C),
  /* 0x0e */ bia(loadRegisterFromImmediate, Register.C),
  /* 0x0f */ rotateAccumulatorRight,

  /* 0x10 */ stop,
  /* 0x11 */ bia(loadRegisterPair, RegisterPair.DE),
  /* 0x12 */ loadIndirectDEFromAccumulator,
  /* 0x13 */ bia(incrementRegisterPair, RegisterPair.DE),
  /* 0x14 */ bia(incrementRegister, Register.D),
  /* 0x15 */ bia(decrementRegister, Register.D),
  /* 0x16 */ bia(loadRegisterFromImmediate, Register.D),
  /* 0x17 */ rotateAccumulatorLeftThroughCarry,
  /* 0x18 */ relativeJump,
  /* 0x19 */ bia(addRegisterPair, RegisterPair.DE),
  /* 0x1a */ loadAccumulatorFromIndirectDE,
  /* 0x1b */ bia(decrementRegisterPair, RegisterPair.DE),
  /* 0x1c */ bia(incrementRegister, Register.E),
  /* 0x1d */ bia(decrementRegister, Register.E),
  /* 0x1e */ bia(loadRegisterFromImmediate, Register.E),
  /* 0x1f */ rotateAccumulatorRightThroughCarry,

  /* 0x20 */ bia(relativeJumpConditional, Condition.NZ),
  /* 0x21 */ bia(loadRegisterPair, RegisterPair.HL),
  /* 0x22 */ loadIndirectHLIncrementFromAccumulator,
  /* 0x23 */ bia(incrementRegisterPair, RegisterPair.HL),
  /* 0x24 */ bia(incrementRegister, Register.H),
  /* 0x25 */ bia(decrementRegister, Register.H),
  /* 0x26 */ bia(loadRegisterFromImmediate, Register.H),
  /* 0x27 */ decimalAdjustAccumulator,
  /* 0x28 */ bia(relativeJumpConditional, Condition.Z),
  /* 0x29 */ bia(addRegisterPair, RegisterPair.HL),
  /* 0x2a */ loadAccumulatorFromIndirectHLIncrement,
  /* 0x2b */ bia(decrementRegisterPair, RegisterPair.HL),
  /* 0x2c */ bia(incrementRegister, Register.L),
  /* 0x2d */ bia(decrementRegister, Register.L),
  /* 0x2e */ bia(loadRegisterFromImmediate, Register.L),
  /* 0x2f */ complementAccumulator,

  /* 0x30 */ bia(relativeJumpConditional, Condition.NC),
  /* 0x31 */ bia(loadRegisterPair, RegisterPair.SP),
  /* 0x32 */ loadIndirectHLDecrementFromAccumulator,
  /* 0x33 */ bia(incrementRegisterPair, RegisterPair.SP),
  /* 0x34 */ incrementIndirectHL,
  /* 0x35 */ decrementIndirectHL,
  /* 0x36 */ loadIndirectHLFromImmediateData,
  /* 0x37 */ setCarryFlag,
  /* 0x38 */ bia(relativeJumpConditional, Condition.C),
  /* 0x39 */ bia(addRegisterPair, RegisterPair.SP),
  /* 0x3a */ loadAccumulatorFromIndirectHLDecrement,
  /* 0x3b */ bia(decrementRegisterPair, RegisterPair.SP),
  /* 0x3c */ bia(incrementRegister, Register.A),
  /* 0x3d */ bia(decrementRegister, Register.A),
  /* 0x3e */ bia(loadRegisterFromImmediate, Register.A),
  /* 0x3f */ complementCarryFlag,

  /* 0x40 */ bia(loadRegisterFromRegister, Register.B, Register.B),
  /* 0x41 */ bia(loadRegisterFromRegister, Register.B, Register.C),
  /* 0x42 */ bia(loadRegisterFromRegister, Register.B, Register.D),
  /* 0x43 */ bia(loadRegisterFromRegister, Register.B, Register.E),
  /* 0x44 */ bia(loadRegisterFromRegister, Register.B, Register.H),
  /* 0x45 */ bia(loadRegisterFromRegister, Register.B, Register.L),
  /* 0x46 */ bia(loadRegisterFromIndirectHL, Register.B),
  /* 0x47 */ bia(loadRegisterFromRegister, Register.B, Register.A),
  /* 0x48 */ bia(loadRegisterFromRegister, Register.C, Register.B),
  /* 0x49 */ bia(loadRegisterFromRegister, Register.C, Register.C),
  /* 0x4a */ bia(loadRegisterFromRegister, Register.C, Register.D),
  /* 0x4b */ bia(loadRegisterFromRegister, Register.C, Register.E),
  /* 0x4c */ bia(loadRegisterFromRegister, Register.C, Register.H),
  /* 0x4d */ bia(loadRegisterFromRegister, Register.C, Register.L),
  /* 0x4e */ bia(loadRegisterFromIndirectHL, Register.C),
  /* 0x4f */ bia(loadRegisterFromRegister, Register.C, Register.A),

  /* 0x50 */ bia(loadRegisterFromRegister, Register.D, Register.B),
  /* 0x51 */ bia(loadRegisterFromRegister, Register.D, Register.C),
  /* 0x52 */ bia(loadRegisterFromRegister, Register.D, Register.D),
  /* 0x53 */ bia(loadRegisterFromRegister, Register.D, Register.E),
  /* 0x54 */ bia(loadRegisterFromRegister, Register.D, Register.H),
  /* 0x55 */ bia(loadRegisterFromRegister, Register.D, Register.L),
  /* 0x56 */ bia(loadRegisterFromIndirectHL, Register.D),
  /* 0x57 */ bia(loadRegisterFromRegister, Register.D, Register.A),
  /* 0x58 */ bia(loadRegisterFromRegister, Register.E, Register.B),
  /* 0x59 */ bia(loadRegisterFromRegister, Register.E, Register.C),
  /* 0x5a */ bia(loadRegisterFromRegister, Register.E, Register.D),
  /* 0x5b */ bia(loadRegisterFromRegister, Register.E, Register.E),
  /* 0x5c */ bia(loadRegisterFromRegister, Register.E, Register.H),
  /* 0x5d */ bia(loadRegisterFromRegister, Register.E, Register.L),
  /* 0x5e */ bia(loadRegisterFromIndirectHL, Register.E),
  /* 0x5f */ bia(loadRegisterFromRegister, Register.E, Register.A),

  /* 0x60 */ bia(loadRegisterFromRegister, Register.H, Register.B),
  /* 0x61 */ bia(loadRegisterFromRegister, Register.H, Register.C),
  /* 0x62 */ bia(loadRegisterFromRegister, Register.H, Register.D),
  /* 0x63 */ bia(loadRegisterFromRegister, Register.H, Register.E),
  /* 0x64 */ bia(loadRegisterFromRegister, Register.H, Register.H),
  /* 0x65 */ bia(loadRegisterFromRegister, Register.H, Register.L),
  /* 0x66 */ bia(loadRegisterFromIndirectHL, Register.H),
  /* 0x67 */ bia(loadRegisterFromRegister, Register.H, Register.A),
  /* 0x68 */ bia(loadRegisterFromRegister, Register.L, Register.B),
  /* 0x69 */ bia(loadRegisterFromRegister, Register.L, Register.C),
  /* 0x6a */ bia(loadRegisterFromRegister, Register.L, Register.D),
  /* 0x6b */ bia(loadRegisterFromRegister, Register.L, Register.E),
  /* 0x6c */ bia(loadRegisterFromRegister, Register.L, Register.H),
  /* 0x6d */ bia(loadRegisterFromRegister, Register.L, Register.L),
  /* 0x6e */ bia(loadRegisterFromIndirectHL, Register.L),
  /* 0x6f */ bia(loadRegisterFromRegister, Register.L, Register.A),

  /* 0x70 */ bia(loadIndirectHLFromRegister, Register.B),
  /* 0x71 */ bia(loadIndirectHLFromRegister, Register.C),
  /* 0x72 */ bia(loadIndirectHLFromRegister, Register.D),
  /* 0x73 */ bia(loadIndirectHLFromRegister, Register.E),
  /* 0x74 */ bia(loadIndirectHLFromRegister, Register.H),
  /* 0x75 */ bia(loadIndirectHLFromRegister, Register.L),
  /* 0x76 */ halt,
  /* 0x77 */ bia(loadIndirectHLFromRegister, Register.A),
  /* 0x78 */ bia(loadRegisterFromRegister, Register.A, Register.B),
  /* 0x79 */ bia(loadRegisterFromRegister, Register.A, Register.C),
  /* 0x7a */ bia(loadRegisterFromRegister, Register.A, Register.D),
  /* 0x7b */ bia(loadRegisterFromRegister, Register.A, Register.E),
  /* 0x7c */ bia(loadRegisterFromRegister, Register.A, Register.H),
  /* 0x7d */ bia(loadRegisterFromRegister, Register.A, Register.L),
  /* 0x7e */ bia(loadRegisterFromIndirectHL, Register.A),
  /* 0x7f */ bia(loadRegisterFromRegister, Register.A, Register.A),

  /* 0x80 */ bia(addRegisterToAccumulator, Register.B),
  /* 0x81 */ bia(addRegisterToAccumulator, Register.C),
  /* 0x82 */ bia(addRegisterToAccumulator, Register.D),
  /* 0x83 */ bia(addRegisterToAccumulator, Register.E),
  /* 0x84 */ bia(addRegisterToAccumulator, Register.H),
  /* 0x85 */ bia(addRegisterToAccumulator, Register.L),
  /* 0x86 */ addIndirectHLToAccumulator,
  /* 0x87 */ bia(addRegisterToAccumulator, Register.A),
  /* 0x88 */ bia(addRegisterToAccumulatorWithCarry, Register.B),
  /* 0x89 */ bia(addRegisterToAccumulatorWithCarry, Register.C),
  /* 0x8a */ bia(addRegisterToAccumulatorWithCarry, Register.D),
  /* 0x8b */ bia(addRegisterToAccumulatorWithCarry, Register.E),
  /* 0x8c */ bia(addRegisterToAccumulatorWithCarry, Register.H),
  /* 0x8d */ bia(addRegisterToAccumulatorWithCarry, Register.L),
  /* 0x8e */ addIndirectHLToAccumulatorWithCarry,
  /* 0x8f */ bia(addRegisterToAccumulatorWithCarry, Register.A),

  /* 0x90 */ bia(subtractRegisterFromAccumualtor, Register.B),
  /* 0x91 */ bia(subtractRegisterFromAccumualtor, Register.C),
  /* 0x92 */ bia(subtractRegisterFromAccumualtor, Register.D),
  /* 0x93 */ bia(subtractRegisterFromAccumualtor, Register.E),
  /* 0x94 */ bia(subtractRegisterFromAccumualtor, Register.H),
  /* 0x95 */ bia(subtractRegisterFromAccumualtor, Register.L),
  /* 0x96 */ subtractIndirectHLFromAccumualtor,
  /* 0x97 */ bia(subtractRegisterFromAccumualtor, Register.A),
  /* 0x98 */ bia(subtractRegisterFromAccumualtorWithCarry, Register.B),
  /* 0x99 */ bia(subtractRegisterFromAccumualtorWithCarry, Register.C),
  /* 0x9a */ bia(subtractRegisterFromAccumualtorWithCarry, Register.D),
  /* 0x9b */ bia(subtractRegisterFromAccumualtorWithCarry, Register.E),
  /* 0x9c */ bia(subtractRegisterFromAccumualtorWithCarry, Register.H),
  /* 0x9d */ bia(subtractRegisterFromAccumualtorWithCarry, Register.L),
  /* 0x9e */ subtractIndirectHLFromAccumualtorWithCarry,
  /* 0x9f */ bia(subtractRegisterFromAccumualtorWithCarry, Register.A),

  /* 0xa0 */ bia(andAccumulatorWithRegister, Register.B),
  /* 0xa1 */ bia(andAccumulatorWithRegister, Register.C),
  /* 0xa2 */ bia(andAccumulatorWithRegister, Register.D),
  /* 0xa3 */ bia(andAccumulatorWithRegister, Register.E),
  /* 0xa4 */ bia(andAccumulatorWithRegister, Register.H),
  /* 0xa5 */ bia(andAccumulatorWithRegister, Register.L),
  /* 0xa6 */ andAccumulatorWithIndirectHL,
  /* 0xa7 */ bia(andAccumulatorWithRegister, Register.A),
  /* 0xa8 */ bia(xorAccumulatorWithRegister, Register.B),
  /* 0xa9 */ bia(xorAccumulatorWithRegister, Register.C),
  /* 0xaa */ bia(xorAccumulatorWithRegister, Register.D),
  /* 0xab */ bia(xorAccumulatorWithRegister, Register.E),
  /* 0xac */ bia(xorAccumulatorWithRegister, Register.H),
  /* 0xad */ bia(xorAccumulatorWithRegister, Register.L),
  /* 0xae */ xorAccumulatorWithIndirectHL,
  /* 0xaf */ bia(xorAccumulatorWithRegister, Register.A),

  /* 0xb0 */ bia(orAccumulatorWithRegister, Register.B),
  /* 0xb1 */ bia(orAccumulatorWithRegister, Register.C),
  /* 0xb2 */ bia(orAccumulatorWithRegister, Register.D),
  /* 0xb3 */ bia(orAccumulatorWithRegister, Register.E),
  /* 0xb4 */ bia(orAccumulatorWithRegister, Register.H),
  /* 0xb5 */ bia(orAccumulatorWithRegister, Register.L),
  /* 0xb6 */ orAccumulatorWithIndirectHL,
  /* 0xb7 */ bia(orAccumulatorWithRegister, Register.A),
  /* 0xb8 */ bia(compareAccumulatorToRegister, Register.B),
  /* 0xb9 */ bia(compareAccumulatorToRegister, Register.C),
  /* 0xba */ bia(compareAccumulatorToRegister, Register.D),
  /* 0xbb */ bia(compareAccumulatorToRegister, Register.E),
  /* 0xbc */ bia(compareAccumulatorToRegister, Register.H),
  /* 0xbd */ bia(compareAccumulatorToRegister, Register.L),
  /* 0xbe */ compareAccumulatorToIndirectHL,
  /* 0xbf */ bia(compareAccumulatorToRegister, Register.A),

  /* 0xc0 */ bia(returnFromFunctionConditional, Condition.NZ),
  /* 0xc1 */ bia(popFromStack, RegisterPair.BC),
  /* 0xc2 */ bia(jumpConditional, Condition.NZ),
  /* 0xc3 */ jump,
  /* 0xc4 */ bia(callFunctionConditional, Condition.NZ),
  /* 0xc5 */ bia(pushToStack, RegisterPair.BC),
  /* 0xc6 */ addImmediateToAccumulator,
  /* 0xc7 */ bia(restartFunction, 0x00),
  /* 0xc8 */ bia(returnFromFunctionConditional, Condition.Z),
  /* 0xc9 */ returnFromFunction,
  /* 0xca */ bia(jumpConditional, Condition.Z),
  /* 0xcb */ prefixCBInstruction,
  /* 0xcc */ bia(callFunctionConditional, Condition.Z),
  /* 0xcd */ callFunction,
  /* 0xce */ addImmediateToAccumulatorWithCarry,
  /* 0xcf */ bia(restartFunction, 0x08),

  /* 0xd0 */ bia(returnFromFunctionConditional, Condition.NC),
  /* 0xd1 */ bia(popFromStack, RegisterPair.DE),
  /* 0xd2 */ bia(jumpConditional, Condition.NC),
  /* 0xd3 */ bia(invalidOpcode, 0xd3),
  /* 0xd4 */ bia(callFunctionConditional, Condition.NC),
  /* 0xd5 */ bia(pushToStack, RegisterPair.DE),
  /* 0xd6 */ subtractImmediateFromAccumualtor,
  /* 0xd7 */ bia(restartFunction, 0x10),
  /* 0xd8 */ bia(returnFromFunctionConditional, Condition.C),
  /* 0xd9 */ returnFromInterruptHandler,
  /* 0xda */ bia(jumpConditional, Condition.C),
  /* 0xdb */ bia(invalidOpcode, 0xdb),
  /* 0xdc */ bia(callFunctionConditional, Condition.C),
  /* 0xdd */ bia(invalidOpcode, 0xdd),
  /* 0xde */ subtractImmediateFromAccumualtorWithCarry,
  /* 0xdf */ bia(restartFunction, 0x18),

  /* 0xe0 */ loadDirectByteFromAccumulator,
  /* 0xe1 */ bia(popFromStack, RegisterPair.HL),
  /* 0xe2 */ loadIndirectCFromAccumulator,
  /* 0xe3 */ bia(invalidOpcode, 0xe3),
  /* 0xe4 */ bia(invalidOpcode, 0xe4),
  /* 0xe5 */ bia(pushToStack, RegisterPair.HL),
  /* 0xe6 */ andAccumulatorWithImmediate,
  /* 0xe7 */ bia(restartFunction, 0x20),
  /* 0xe8 */ addOffsetToStackPointer,
  /* 0xe9 */ jumpToHL,
  /* 0xea */ loadDirectWordFromAccumulator,
  /* 0xeb */ bia(invalidOpcode, 0xeb),
  /* 0xec */ bia(invalidOpcode, 0xec),
  /* 0xed */ bia(invalidOpcode, 0xed),
  /* 0xee */ xorAccumulatorWithImmediate,
  /* 0xef */ bia(restartFunction, 0x28),

  /* 0xf0 */ loadAccumulatorFromDirectByte,
  /* 0xf1 */ bia(popFromStack, RegisterPair.AF),
  /* 0xf2 */ loadAccumulatorFromIndirectC,
  /* 0xf3 */ disableInterrupts,
  /* 0xf4 */ bia(invalidOpcode, 0xf4),
  /* 0xf5 */ bia(pushToStack, RegisterPair.AF),
  /* 0xf6 */ orAccumulatorWithImmediate,
  /* 0xf7 */ bia(restartFunction, 0x30),
  /* 0xf8 */ loadHLFromAdjustedStackPointer,
  /* 0xf9 */ loadStackPointerFromHL,
  /* 0xfa */ loadAccumulatorFromDirectWord,
  /* 0xfb */ enableInterrupts,
  /* 0xfc */ bia(invalidOpcode, 0xfc),
  /* 0xfd */ bia(invalidOpcode, 0xfd),
  /* 0xfe */ compareAccumulatorToImmediate,
  /* 0xff */ bia(restartFunction, 0x38),
];
